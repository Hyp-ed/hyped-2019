// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Batteries_BatteryData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_EmergencyBrakes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Motors;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Navigation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Sensors_ImuData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_StateMachine;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClientToServer_Batteries;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClientToServer_Sensors;
}  // namespace protobuf_message_2eproto
namespace telemetry_data {
class ServerToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerToClient>
      _instance;
} _ServerToClient_default_instance_;
class ClientToServer_NavigationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_Navigation>
      _instance;
} _ClientToServer_Navigation_default_instance_;
class ClientToServer_StateMachineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_StateMachine>
      _instance;
} _ClientToServer_StateMachine_default_instance_;
class ClientToServer_MotorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_Motors>
      _instance;
} _ClientToServer_Motors_default_instance_;
class ClientToServer_Batteries_BatteryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_Batteries_BatteryData>
      _instance;
} _ClientToServer_Batteries_BatteryData_default_instance_;
class ClientToServer_BatteriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_Batteries>
      _instance;
} _ClientToServer_Batteries_default_instance_;
class ClientToServer_Sensors_ImuDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_Sensors_ImuData>
      _instance;
} _ClientToServer_Sensors_ImuData_default_instance_;
class ClientToServer_SensorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_Sensors>
      _instance;
} _ClientToServer_Sensors_default_instance_;
class ClientToServer_EmergencyBrakesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer_EmergencyBrakes>
      _instance;
} _ClientToServer_EmergencyBrakes_default_instance_;
class ClientToServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToServer>
      _instance;
} _ClientToServer_default_instance_;
}  // namespace telemetry_data
namespace protobuf_message_2eproto {
static void InitDefaultsServerToClient() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ServerToClient_default_instance_;
    new (ptr) ::telemetry_data::ServerToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ServerToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerToClient =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerToClient}, {}};

static void InitDefaultsClientToServer_Navigation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_Navigation_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_Navigation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_Navigation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Navigation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientToServer_Navigation}, {}};

static void InitDefaultsClientToServer_StateMachine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_StateMachine_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_StateMachine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_StateMachine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_StateMachine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientToServer_StateMachine}, {}};

static void InitDefaultsClientToServer_Motors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_Motors_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_Motors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_Motors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Motors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientToServer_Motors}, {}};

static void InitDefaultsClientToServer_Batteries_BatteryData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_Batteries_BatteryData_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_Batteries_BatteryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_Batteries_BatteryData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Batteries_BatteryData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientToServer_Batteries_BatteryData}, {}};

static void InitDefaultsClientToServer_Batteries() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_Batteries_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_Batteries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_Batteries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientToServer_Batteries =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientToServer_Batteries}, {
      &protobuf_message_2eproto::scc_info_ClientToServer_Batteries_BatteryData.base,}};

static void InitDefaultsClientToServer_Sensors_ImuData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_Sensors_ImuData_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_Sensors_ImuData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_Sensors_ImuData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_Sensors_ImuData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientToServer_Sensors_ImuData}, {}};

static void InitDefaultsClientToServer_Sensors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_Sensors_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_Sensors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_Sensors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientToServer_Sensors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientToServer_Sensors}, {
      &protobuf_message_2eproto::scc_info_ClientToServer_Sensors_ImuData.base,}};

static void InitDefaultsClientToServer_EmergencyBrakes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_EmergencyBrakes_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer_EmergencyBrakes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer_EmergencyBrakes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientToServer_EmergencyBrakes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientToServer_EmergencyBrakes}, {}};

static void InitDefaultsClientToServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::telemetry_data::_ClientToServer_default_instance_;
    new (ptr) ::telemetry_data::ClientToServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry_data::ClientToServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ClientToServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsClientToServer}, {
      &protobuf_message_2eproto::scc_info_ClientToServer_Navigation.base,
      &protobuf_message_2eproto::scc_info_ClientToServer_StateMachine.base,
      &protobuf_message_2eproto::scc_info_ClientToServer_Motors.base,
      &protobuf_message_2eproto::scc_info_ClientToServer_Batteries.base,
      &protobuf_message_2eproto::scc_info_ClientToServer_Sensors.base,
      &protobuf_message_2eproto::scc_info_ClientToServer_EmergencyBrakes.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServerToClient.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_Navigation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_StateMachine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_Motors.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_Batteries_BatteryData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_Batteries.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_Sensors_ImuData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_Sensors.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer_EmergencyBrakes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToServer.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ServerToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ServerToClient, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ServerToClient, run_length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Navigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Navigation, module_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Navigation, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Navigation, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Navigation, acceleration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_StateMachine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_StateMachine, current_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, module_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, velocity_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, velocity_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, velocity_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, velocity_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, velocity_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Motors, velocity_6_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, low_voltage_cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries_BatteryData, high_voltage_cell_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries, module_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries, low_power_batteries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Batteries, high_power_batteries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Sensors_ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Sensors_ImuData, operational_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Sensors_ImuData, acc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Sensors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Sensors, module_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_Sensors, imu_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_EmergencyBrakes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_EmergencyBrakes, front_brakes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer_EmergencyBrakes, rear_brakes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, navigation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, state_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, motors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, batteries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::telemetry_data::ClientToServer, emergency_brakes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::telemetry_data::ServerToClient)},
  { 7, -1, sizeof(::telemetry_data::ClientToServer_Navigation)},
  { 16, -1, sizeof(::telemetry_data::ClientToServer_StateMachine)},
  { 22, -1, sizeof(::telemetry_data::ClientToServer_Motors)},
  { 34, -1, sizeof(::telemetry_data::ClientToServer_Batteries_BatteryData)},
  { 45, -1, sizeof(::telemetry_data::ClientToServer_Batteries)},
  { 53, -1, sizeof(::telemetry_data::ClientToServer_Sensors_ImuData)},
  { 60, -1, sizeof(::telemetry_data::ClientToServer_Sensors)},
  { 67, -1, sizeof(::telemetry_data::ClientToServer_EmergencyBrakes)},
  { 74, -1, sizeof(::telemetry_data::ClientToServer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ServerToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_Navigation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_StateMachine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_Motors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_Batteries_BatteryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_Batteries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_Sensors_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_Sensors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_EmergencyBrakes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::telemetry_data::_ClientToServer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\022\016telemetry_data\"\377\001\n\016Serv"
      "erToClient\0227\n\007command\030\001 \001(\0162&.telemetry_"
      "data.ServerToClient.Command\022\022\n\nrun_lengt"
      "h\030\002 \001(\002\"\237\001\n\007Command\022\007\n\003ACK\020\000\022\010\n\004STOP\020\001\022\r"
      "\n\tCALIBRATE\020\002\022\n\n\006LAUNCH\020\003\022\t\n\005RESET\020\004\022\016\n\n"
      "RUN_LENGTH\020\005\022\031\n\025SERVICE_PROPULSION_GO\020\006\022"
      "\033\n\027SERVICE_PROPULSION_STOP\020\007\022\023\n\017NOMINAL_"
      "BRAKING\020\010\"\271\r\n\016ClientToServer\022=\n\nnavigati"
      "on\030\001 \001(\0132).telemetry_data.ClientToServer"
      ".Navigation\022B\n\rstate_machine\030\002 \001(\0132+.tel"
      "emetry_data.ClientToServer.StateMachine\022"
      "5\n\006motors\030\003 \001(\0132%.telemetry_data.ClientT"
      "oServer.Motors\022;\n\tbatteries\030\004 \001(\0132(.tele"
      "metry_data.ClientToServer.Batteries\0227\n\007s"
      "ensors\030\005 \001(\0132&.telemetry_data.ClientToSe"
      "rver.Sensors\022H\n\020emergency_brakes\030\006 \001(\0132."
      ".telemetry_data.ClientToServer.Emergency"
      "Brakes\032\212\001\n\nNavigation\022B\n\rmodule_status\030\001"
      " \001(\0162+.telemetry_data.ClientToServer.Mod"
      "uleStatus\022\020\n\010distance\030\002 \001(\002\022\020\n\010velocity\030"
      "\003 \001(\002\022\024\n\014acceleration\030\004 \001(\002\032\225\002\n\014StateMac"
      "hine\022H\n\rcurrent_state\030\002 \001(\01621.telemetry_"
      "data.ClientToServer.StateMachine.State\"\272"
      "\001\n\005State\022\013\n\007INVALID\020\000\022\010\n\004IDLE\020\001\022\017\n\013CALIB"
      "RATING\020\002\022\t\n\005READY\020\003\022\020\n\014ACCELERATING\020\004\022\023\n"
      "\017NOMINAL_BRAKING\020\005\022\025\n\021EMERGENCY_BRAKING\020"
      "\006\022\020\n\014RUN_COMPLETE\020\007\022\023\n\017FAILURE_STOPPED\020\010"
      "\022\013\n\007EXITING\020\t\022\014\n\010FINISHED\020\n\032\304\001\n\006Motors\022B"
      "\n\rmodule_status\030\001 \001(\0162+.telemetry_data.C"
      "lientToServer.ModuleStatus\022\022\n\nvelocity_1"
      "\030\002 \001(\021\022\022\n\nvelocity_2\030\003 \001(\021\022\022\n\nvelocity_3"
      "\030\004 \001(\021\022\022\n\nvelocity_4\030\005 \001(\021\022\022\n\nvelocity_5"
      "\030\006 \001(\021\022\022\n\nvelocity_6\030\007 \001(\021\032\202\003\n\tBatteries"
      "\022B\n\rmodule_status\030\001 \001(\0162+.telemetry_data"
      ".ClientToServer.ModuleStatus\022Q\n\023low_powe"
      "r_batteries\030\002 \003(\01324.telemetry_data.Clien"
      "tToServer.Batteries.BatteryData\022R\n\024high_"
      "power_batteries\030\003 \003(\01324.telemetry_data.C"
      "lientToServer.Batteries.BatteryData\032\211\001\n\013"
      "BatteryData\022\017\n\007voltage\030\001 \001(\r\022\017\n\007current\030"
      "\002 \001(\021\022\016\n\006charge\030\003 \001(\r\022\023\n\013temperature\030\004 \001"
      "(\005\022\030\n\020low_voltage_cell\030\005 \001(\r\022\031\n\021high_vol"
      "tage_cell\030\006 \001(\r\032\267\001\n\007Sensors\022B\n\rmodule_st"
      "atus\030\001 \001(\0162+.telemetry_data.ClientToServ"
      "er.ModuleStatus\022;\n\003imu\030\002 \003(\0132..telemetry"
      "_data.ClientToServer.Sensors.ImuData\032+\n\007"
      "ImuData\022\023\n\013operational\030\001 \001(\010\022\013\n\003acc\030\002 \003("
      "\002\032<\n\017EmergencyBrakes\022\024\n\014front_brakes\030\001 \001"
      "(\010\022\023\n\013rear_brakes\030\002 \001(\010\"D\n\014ModuleStatus\022"
      "\t\n\005START\020\000\022\010\n\004INIT\020\001\022\t\n\005READY\020\002\022\024\n\020CRITI"
      "CAL_FAILURE\020\003B\036\n\rtelemetrydataB\rTelemetr"
      "yDatab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
namespace telemetry_data {
const ::google::protobuf::EnumDescriptor* ServerToClient_Command_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool ServerToClient_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerToClient_Command ServerToClient::ACK;
const ServerToClient_Command ServerToClient::STOP;
const ServerToClient_Command ServerToClient::CALIBRATE;
const ServerToClient_Command ServerToClient::LAUNCH;
const ServerToClient_Command ServerToClient::RESET;
const ServerToClient_Command ServerToClient::RUN_LENGTH;
const ServerToClient_Command ServerToClient::SERVICE_PROPULSION_GO;
const ServerToClient_Command ServerToClient::SERVICE_PROPULSION_STOP;
const ServerToClient_Command ServerToClient::NOMINAL_BRAKING;
const ServerToClient_Command ServerToClient::Command_MIN;
const ServerToClient_Command ServerToClient::Command_MAX;
const int ServerToClient::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ClientToServer_StateMachine_State_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool ClientToServer_StateMachine_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientToServer_StateMachine_State ClientToServer_StateMachine::INVALID;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::IDLE;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::CALIBRATING;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::READY;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::ACCELERATING;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::NOMINAL_BRAKING;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::EMERGENCY_BRAKING;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::RUN_COMPLETE;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::FAILURE_STOPPED;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::EXITING;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::FINISHED;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::State_MIN;
const ClientToServer_StateMachine_State ClientToServer_StateMachine::State_MAX;
const int ClientToServer_StateMachine::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ClientToServer_ModuleStatus_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[2];
}
bool ClientToServer_ModuleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientToServer_ModuleStatus ClientToServer::START;
const ClientToServer_ModuleStatus ClientToServer::INIT;
const ClientToServer_ModuleStatus ClientToServer::READY;
const ClientToServer_ModuleStatus ClientToServer::CRITICAL_FAILURE;
const ClientToServer_ModuleStatus ClientToServer::ModuleStatus_MIN;
const ClientToServer_ModuleStatus ClientToServer::ModuleStatus_MAX;
const int ClientToServer::ModuleStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ServerToClient::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerToClient::kCommandFieldNumber;
const int ServerToClient::kRunLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerToClient::ServerToClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ServerToClient.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ServerToClient)
}
ServerToClient::ServerToClient(const ServerToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&run_length_) -
    reinterpret_cast<char*>(&command_)) + sizeof(run_length_));
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ServerToClient)
}

void ServerToClient::SharedCtor() {
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_length_) -
      reinterpret_cast<char*>(&command_)) + sizeof(run_length_));
}

ServerToClient::~ServerToClient() {
  // @@protoc_insertion_point(destructor:telemetry_data.ServerToClient)
  SharedDtor();
}

void ServerToClient::SharedDtor() {
}

void ServerToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerToClient::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerToClient& ServerToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ServerToClient.base);
  return *internal_default_instance();
}


void ServerToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ServerToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_length_) -
      reinterpret_cast<char*>(&command_)) + sizeof(run_length_));
  _internal_metadata_.Clear();
}

bool ServerToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ServerToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ServerToClient.Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::telemetry_data::ServerToClient_Command >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float run_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &run_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ServerToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ServerToClient)
  return false;
#undef DO_
}

void ServerToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ServerToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ServerToClient.Command command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // float run_length = 2;
  if (this->run_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->run_length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ServerToClient)
}

::google::protobuf::uint8* ServerToClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ServerToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ServerToClient.Command command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // float run_length = 2;
  if (this->run_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->run_length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ServerToClient)
  return target;
}

size_t ServerToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ServerToClient)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry_data.ServerToClient.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // float run_length = 2;
  if (this->run_length() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerToClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ServerToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ServerToClient)
    MergeFrom(*source);
  }
}

void ServerToClient::MergeFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.run_length() != 0) {
    set_run_length(from.run_length());
  }
}

void ServerToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient::IsInitialized() const {
  return true;
}

void ServerToClient::Swap(ServerToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerToClient::InternalSwap(ServerToClient* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(run_length_, other->run_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerToClient::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_Navigation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_Navigation::kModuleStatusFieldNumber;
const int ClientToServer_Navigation::kDistanceFieldNumber;
const int ClientToServer_Navigation::kVelocityFieldNumber;
const int ClientToServer_Navigation::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_Navigation::ClientToServer_Navigation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_Navigation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.Navigation)
}
ClientToServer_Navigation::ClientToServer_Navigation(const ClientToServer_Navigation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&module_status_, &from.module_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&module_status_)) + sizeof(acceleration_));
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.Navigation)
}

void ClientToServer_Navigation::SharedCtor() {
  ::memset(&module_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&module_status_)) + sizeof(acceleration_));
}

ClientToServer_Navigation::~ClientToServer_Navigation() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.Navigation)
  SharedDtor();
}

void ClientToServer_Navigation::SharedDtor() {
}

void ClientToServer_Navigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_Navigation::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_Navigation& ClientToServer_Navigation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_Navigation.base);
  return *internal_default_instance();
}


void ClientToServer_Navigation::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.Navigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&module_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&module_status_)) + sizeof(acceleration_));
  _internal_metadata_.Clear();
}

bool ClientToServer_Navigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.Navigation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_status(static_cast< ::telemetry_data::ClientToServer_ModuleStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.Navigation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.Navigation)
  return false;
#undef DO_
}

void ClientToServer_Navigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.Navigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->module_status(), output);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // float velocity = 3;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->velocity(), output);
  }

  // float acceleration = 4;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->acceleration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.Navigation)
}

::google::protobuf::uint8* ClientToServer_Navigation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.Navigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->module_status(), target);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  // float velocity = 3;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->velocity(), target);
  }

  // float acceleration = 4;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->acceleration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.Navigation)
  return target;
}

size_t ClientToServer_Navigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.Navigation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_status());
  }

  // float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 3;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float acceleration = 4;
  if (this->acceleration() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Navigation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Navigation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_Navigation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.Navigation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.Navigation)
    MergeFrom(*source);
  }
}

void ClientToServer_Navigation::MergeFrom(const ClientToServer_Navigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_status() != 0) {
    set_module_status(from.module_status());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
}

void ClientToServer_Navigation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Navigation::CopyFrom(const ClientToServer_Navigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Navigation::IsInitialized() const {
  return true;
}

void ClientToServer_Navigation::Swap(ClientToServer_Navigation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_Navigation::InternalSwap(ClientToServer_Navigation* other) {
  using std::swap;
  swap(module_status_, other->module_status_);
  swap(distance_, other->distance_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_Navigation::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_StateMachine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_StateMachine::kCurrentStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_StateMachine::ClientToServer_StateMachine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_StateMachine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.StateMachine)
}
ClientToServer_StateMachine::ClientToServer_StateMachine(const ClientToServer_StateMachine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_state_ = from.current_state_;
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.StateMachine)
}

void ClientToServer_StateMachine::SharedCtor() {
  current_state_ = 0;
}

ClientToServer_StateMachine::~ClientToServer_StateMachine() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.StateMachine)
  SharedDtor();
}

void ClientToServer_StateMachine::SharedDtor() {
}

void ClientToServer_StateMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_StateMachine::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_StateMachine& ClientToServer_StateMachine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_StateMachine.base);
  return *internal_default_instance();
}


void ClientToServer_StateMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.StateMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_state_ = 0;
  _internal_metadata_.Clear();
}

bool ClientToServer_StateMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.StateMachine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ClientToServer.StateMachine.State current_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_state(static_cast< ::telemetry_data::ClientToServer_StateMachine_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.StateMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.StateMachine)
  return false;
#undef DO_
}

void ClientToServer_StateMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.StateMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.StateMachine.State current_state = 2;
  if (this->current_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->current_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.StateMachine)
}

::google::protobuf::uint8* ClientToServer_StateMachine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.StateMachine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.StateMachine.State current_state = 2;
  if (this->current_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->current_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.StateMachine)
  return target;
}

size_t ClientToServer_StateMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.StateMachine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry_data.ClientToServer.StateMachine.State current_state = 2;
  if (this->current_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_StateMachine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.StateMachine)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_StateMachine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_StateMachine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.StateMachine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.StateMachine)
    MergeFrom(*source);
  }
}

void ClientToServer_StateMachine::MergeFrom(const ClientToServer_StateMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.StateMachine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current_state() != 0) {
    set_current_state(from.current_state());
  }
}

void ClientToServer_StateMachine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.StateMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_StateMachine::CopyFrom(const ClientToServer_StateMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.StateMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_StateMachine::IsInitialized() const {
  return true;
}

void ClientToServer_StateMachine::Swap(ClientToServer_StateMachine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_StateMachine::InternalSwap(ClientToServer_StateMachine* other) {
  using std::swap;
  swap(current_state_, other->current_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_StateMachine::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_Motors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_Motors::kModuleStatusFieldNumber;
const int ClientToServer_Motors::kVelocity1FieldNumber;
const int ClientToServer_Motors::kVelocity2FieldNumber;
const int ClientToServer_Motors::kVelocity3FieldNumber;
const int ClientToServer_Motors::kVelocity4FieldNumber;
const int ClientToServer_Motors::kVelocity5FieldNumber;
const int ClientToServer_Motors::kVelocity6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_Motors::ClientToServer_Motors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_Motors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.Motors)
}
ClientToServer_Motors::ClientToServer_Motors(const ClientToServer_Motors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&module_status_, &from.module_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_6_) -
    reinterpret_cast<char*>(&module_status_)) + sizeof(velocity_6_));
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.Motors)
}

void ClientToServer_Motors::SharedCtor() {
  ::memset(&module_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_6_) -
      reinterpret_cast<char*>(&module_status_)) + sizeof(velocity_6_));
}

ClientToServer_Motors::~ClientToServer_Motors() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.Motors)
  SharedDtor();
}

void ClientToServer_Motors::SharedDtor() {
}

void ClientToServer_Motors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_Motors::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_Motors& ClientToServer_Motors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_Motors.base);
  return *internal_default_instance();
}


void ClientToServer_Motors::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.Motors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&module_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_6_) -
      reinterpret_cast<char*>(&module_status_)) + sizeof(velocity_6_));
  _internal_metadata_.Clear();
}

bool ClientToServer_Motors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.Motors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_status(static_cast< ::telemetry_data::ClientToServer_ModuleStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 velocity_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocity_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 velocity_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocity_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 velocity_3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocity_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 velocity_4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocity_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 velocity_5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocity_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 velocity_6 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocity_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.Motors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.Motors)
  return false;
#undef DO_
}

void ClientToServer_Motors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.Motors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->module_status(), output);
  }

  // sint32 velocity_1 = 2;
  if (this->velocity_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->velocity_1(), output);
  }

  // sint32 velocity_2 = 3;
  if (this->velocity_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->velocity_2(), output);
  }

  // sint32 velocity_3 = 4;
  if (this->velocity_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->velocity_3(), output);
  }

  // sint32 velocity_4 = 5;
  if (this->velocity_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->velocity_4(), output);
  }

  // sint32 velocity_5 = 6;
  if (this->velocity_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->velocity_5(), output);
  }

  // sint32 velocity_6 = 7;
  if (this->velocity_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->velocity_6(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.Motors)
}

::google::protobuf::uint8* ClientToServer_Motors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.Motors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->module_status(), target);
  }

  // sint32 velocity_1 = 2;
  if (this->velocity_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->velocity_1(), target);
  }

  // sint32 velocity_2 = 3;
  if (this->velocity_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->velocity_2(), target);
  }

  // sint32 velocity_3 = 4;
  if (this->velocity_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->velocity_3(), target);
  }

  // sint32 velocity_4 = 5;
  if (this->velocity_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->velocity_4(), target);
  }

  // sint32 velocity_5 = 6;
  if (this->velocity_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->velocity_5(), target);
  }

  // sint32 velocity_6 = 7;
  if (this->velocity_6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->velocity_6(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.Motors)
  return target;
}

size_t ClientToServer_Motors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.Motors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_status());
  }

  // sint32 velocity_1 = 2;
  if (this->velocity_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->velocity_1());
  }

  // sint32 velocity_2 = 3;
  if (this->velocity_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->velocity_2());
  }

  // sint32 velocity_3 = 4;
  if (this->velocity_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->velocity_3());
  }

  // sint32 velocity_4 = 5;
  if (this->velocity_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->velocity_4());
  }

  // sint32 velocity_5 = 6;
  if (this->velocity_5() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->velocity_5());
  }

  // sint32 velocity_6 = 7;
  if (this->velocity_6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->velocity_6());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Motors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.Motors)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Motors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_Motors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.Motors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.Motors)
    MergeFrom(*source);
  }
}

void ClientToServer_Motors::MergeFrom(const ClientToServer_Motors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.Motors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_status() != 0) {
    set_module_status(from.module_status());
  }
  if (from.velocity_1() != 0) {
    set_velocity_1(from.velocity_1());
  }
  if (from.velocity_2() != 0) {
    set_velocity_2(from.velocity_2());
  }
  if (from.velocity_3() != 0) {
    set_velocity_3(from.velocity_3());
  }
  if (from.velocity_4() != 0) {
    set_velocity_4(from.velocity_4());
  }
  if (from.velocity_5() != 0) {
    set_velocity_5(from.velocity_5());
  }
  if (from.velocity_6() != 0) {
    set_velocity_6(from.velocity_6());
  }
}

void ClientToServer_Motors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.Motors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Motors::CopyFrom(const ClientToServer_Motors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.Motors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Motors::IsInitialized() const {
  return true;
}

void ClientToServer_Motors::Swap(ClientToServer_Motors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_Motors::InternalSwap(ClientToServer_Motors* other) {
  using std::swap;
  swap(module_status_, other->module_status_);
  swap(velocity_1_, other->velocity_1_);
  swap(velocity_2_, other->velocity_2_);
  swap(velocity_3_, other->velocity_3_);
  swap(velocity_4_, other->velocity_4_);
  swap(velocity_5_, other->velocity_5_);
  swap(velocity_6_, other->velocity_6_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_Motors::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_Batteries_BatteryData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_Batteries_BatteryData::kVoltageFieldNumber;
const int ClientToServer_Batteries_BatteryData::kCurrentFieldNumber;
const int ClientToServer_Batteries_BatteryData::kChargeFieldNumber;
const int ClientToServer_Batteries_BatteryData::kTemperatureFieldNumber;
const int ClientToServer_Batteries_BatteryData::kLowVoltageCellFieldNumber;
const int ClientToServer_Batteries_BatteryData::kHighVoltageCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_Batteries_BatteryData::ClientToServer_Batteries_BatteryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_Batteries_BatteryData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.Batteries.BatteryData)
}
ClientToServer_Batteries_BatteryData::ClientToServer_Batteries_BatteryData(const ClientToServer_Batteries_BatteryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&voltage_, &from.voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_voltage_cell_) -
    reinterpret_cast<char*>(&voltage_)) + sizeof(high_voltage_cell_));
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.Batteries.BatteryData)
}

void ClientToServer_Batteries_BatteryData::SharedCtor() {
  ::memset(&voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_voltage_cell_) -
      reinterpret_cast<char*>(&voltage_)) + sizeof(high_voltage_cell_));
}

ClientToServer_Batteries_BatteryData::~ClientToServer_Batteries_BatteryData() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.Batteries.BatteryData)
  SharedDtor();
}

void ClientToServer_Batteries_BatteryData::SharedDtor() {
}

void ClientToServer_Batteries_BatteryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_Batteries_BatteryData::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_Batteries_BatteryData& ClientToServer_Batteries_BatteryData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_Batteries_BatteryData.base);
  return *internal_default_instance();
}


void ClientToServer_Batteries_BatteryData::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_voltage_cell_) -
      reinterpret_cast<char*>(&voltage_)) + sizeof(high_voltage_cell_));
  _internal_metadata_.Clear();
}

bool ClientToServer_Batteries_BatteryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 voltage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 current = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 charge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 low_voltage_cell = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_voltage_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 high_voltage_cell = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_voltage_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.Batteries.BatteryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.Batteries.BatteryData)
  return false;
#undef DO_
}

void ClientToServer_Batteries_BatteryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 voltage = 1;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->voltage(), output);
  }

  // sint32 current = 2;
  if (this->current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->current(), output);
  }

  // uint32 charge = 3;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charge(), output);
  }

  // int32 temperature = 4;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->temperature(), output);
  }

  // uint32 low_voltage_cell = 5;
  if (this->low_voltage_cell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->low_voltage_cell(), output);
  }

  // uint32 high_voltage_cell = 6;
  if (this->high_voltage_cell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->high_voltage_cell(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.Batteries.BatteryData)
}

::google::protobuf::uint8* ClientToServer_Batteries_BatteryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 voltage = 1;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->voltage(), target);
  }

  // sint32 current = 2;
  if (this->current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->current(), target);
  }

  // uint32 charge = 3;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charge(), target);
  }

  // int32 temperature = 4;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->temperature(), target);
  }

  // uint32 low_voltage_cell = 5;
  if (this->low_voltage_cell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->low_voltage_cell(), target);
  }

  // uint32 high_voltage_cell = 6;
  if (this->high_voltage_cell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->high_voltage_cell(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.Batteries.BatteryData)
  return target;
}

size_t ClientToServer_Batteries_BatteryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 voltage = 1;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voltage());
  }

  // sint32 current = 2;
  if (this->current() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->current());
  }

  // uint32 charge = 3;
  if (this->charge() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->charge());
  }

  // int32 temperature = 4;
  if (this->temperature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->temperature());
  }

  // uint32 low_voltage_cell = 5;
  if (this->low_voltage_cell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_voltage_cell());
  }

  // uint32 high_voltage_cell = 6;
  if (this->high_voltage_cell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_voltage_cell());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Batteries_BatteryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Batteries_BatteryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_Batteries_BatteryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.Batteries.BatteryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.Batteries.BatteryData)
    MergeFrom(*source);
  }
}

void ClientToServer_Batteries_BatteryData::MergeFrom(const ClientToServer_Batteries_BatteryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.current() != 0) {
    set_current(from.current());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.low_voltage_cell() != 0) {
    set_low_voltage_cell(from.low_voltage_cell());
  }
  if (from.high_voltage_cell() != 0) {
    set_high_voltage_cell(from.high_voltage_cell());
  }
}

void ClientToServer_Batteries_BatteryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Batteries_BatteryData::CopyFrom(const ClientToServer_Batteries_BatteryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.Batteries.BatteryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Batteries_BatteryData::IsInitialized() const {
  return true;
}

void ClientToServer_Batteries_BatteryData::Swap(ClientToServer_Batteries_BatteryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_Batteries_BatteryData::InternalSwap(ClientToServer_Batteries_BatteryData* other) {
  using std::swap;
  swap(voltage_, other->voltage_);
  swap(current_, other->current_);
  swap(charge_, other->charge_);
  swap(temperature_, other->temperature_);
  swap(low_voltage_cell_, other->low_voltage_cell_);
  swap(high_voltage_cell_, other->high_voltage_cell_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_Batteries_BatteryData::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_Batteries::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_Batteries::kModuleStatusFieldNumber;
const int ClientToServer_Batteries::kLowPowerBatteriesFieldNumber;
const int ClientToServer_Batteries::kHighPowerBatteriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_Batteries::ClientToServer_Batteries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_Batteries.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.Batteries)
}
ClientToServer_Batteries::ClientToServer_Batteries(const ClientToServer_Batteries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      low_power_batteries_(from.low_power_batteries_),
      high_power_batteries_(from.high_power_batteries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_status_ = from.module_status_;
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.Batteries)
}

void ClientToServer_Batteries::SharedCtor() {
  module_status_ = 0;
}

ClientToServer_Batteries::~ClientToServer_Batteries() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.Batteries)
  SharedDtor();
}

void ClientToServer_Batteries::SharedDtor() {
}

void ClientToServer_Batteries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_Batteries::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_Batteries& ClientToServer_Batteries::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_Batteries.base);
  return *internal_default_instance();
}


void ClientToServer_Batteries::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.Batteries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  low_power_batteries_.Clear();
  high_power_batteries_.Clear();
  module_status_ = 0;
  _internal_metadata_.Clear();
}

bool ClientToServer_Batteries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.Batteries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_status(static_cast< ::telemetry_data::ClientToServer_ModuleStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .telemetry_data.ClientToServer.Batteries.BatteryData low_power_batteries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_low_power_batteries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .telemetry_data.ClientToServer.Batteries.BatteryData high_power_batteries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_high_power_batteries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.Batteries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.Batteries)
  return false;
#undef DO_
}

void ClientToServer_Batteries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.Batteries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->module_status(), output);
  }

  // repeated .telemetry_data.ClientToServer.Batteries.BatteryData low_power_batteries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->low_power_batteries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->low_power_batteries(static_cast<int>(i)),
      output);
  }

  // repeated .telemetry_data.ClientToServer.Batteries.BatteryData high_power_batteries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->high_power_batteries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->high_power_batteries(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.Batteries)
}

::google::protobuf::uint8* ClientToServer_Batteries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.Batteries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->module_status(), target);
  }

  // repeated .telemetry_data.ClientToServer.Batteries.BatteryData low_power_batteries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->low_power_batteries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->low_power_batteries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .telemetry_data.ClientToServer.Batteries.BatteryData high_power_batteries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->high_power_batteries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->high_power_batteries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.Batteries)
  return target;
}

size_t ClientToServer_Batteries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.Batteries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .telemetry_data.ClientToServer.Batteries.BatteryData low_power_batteries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->low_power_batteries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->low_power_batteries(static_cast<int>(i)));
    }
  }

  // repeated .telemetry_data.ClientToServer.Batteries.BatteryData high_power_batteries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->high_power_batteries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->high_power_batteries(static_cast<int>(i)));
    }
  }

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Batteries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.Batteries)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Batteries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_Batteries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.Batteries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.Batteries)
    MergeFrom(*source);
  }
}

void ClientToServer_Batteries::MergeFrom(const ClientToServer_Batteries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.Batteries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  low_power_batteries_.MergeFrom(from.low_power_batteries_);
  high_power_batteries_.MergeFrom(from.high_power_batteries_);
  if (from.module_status() != 0) {
    set_module_status(from.module_status());
  }
}

void ClientToServer_Batteries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.Batteries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Batteries::CopyFrom(const ClientToServer_Batteries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.Batteries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Batteries::IsInitialized() const {
  return true;
}

void ClientToServer_Batteries::Swap(ClientToServer_Batteries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_Batteries::InternalSwap(ClientToServer_Batteries* other) {
  using std::swap;
  CastToBase(&low_power_batteries_)->InternalSwap(CastToBase(&other->low_power_batteries_));
  CastToBase(&high_power_batteries_)->InternalSwap(CastToBase(&other->high_power_batteries_));
  swap(module_status_, other->module_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_Batteries::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_Sensors_ImuData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_Sensors_ImuData::kOperationalFieldNumber;
const int ClientToServer_Sensors_ImuData::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_Sensors_ImuData::ClientToServer_Sensors_ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_Sensors_ImuData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.Sensors.ImuData)
}
ClientToServer_Sensors_ImuData::ClientToServer_Sensors_ImuData(const ClientToServer_Sensors_ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      acc_(from.acc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operational_ = from.operational_;
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.Sensors.ImuData)
}

void ClientToServer_Sensors_ImuData::SharedCtor() {
  operational_ = false;
}

ClientToServer_Sensors_ImuData::~ClientToServer_Sensors_ImuData() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.Sensors.ImuData)
  SharedDtor();
}

void ClientToServer_Sensors_ImuData::SharedDtor() {
}

void ClientToServer_Sensors_ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_Sensors_ImuData::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_Sensors_ImuData& ClientToServer_Sensors_ImuData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_Sensors_ImuData.base);
  return *internal_default_instance();
}


void ClientToServer_Sensors_ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.Sensors.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_.Clear();
  operational_ = false;
  _internal_metadata_.Clear();
}

bool ClientToServer_Sensors_ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.Sensors.ImuData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool operational = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &operational_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float acc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_acc())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_acc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.Sensors.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.Sensors.ImuData)
  return false;
#undef DO_
}

void ClientToServer_Sensors_ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.Sensors.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool operational = 1;
  if (this->operational() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->operational(), output);
  }

  // repeated float acc = 2;
  if (this->acc_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _acc_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->acc().data(), this->acc_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.Sensors.ImuData)
}

::google::protobuf::uint8* ClientToServer_Sensors_ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.Sensors.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool operational = 1;
  if (this->operational() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->operational(), target);
  }

  // repeated float acc = 2;
  if (this->acc_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _acc_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->acc_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.Sensors.ImuData)
  return target;
}

size_t ClientToServer_Sensors_ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.Sensors.ImuData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float acc = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->acc_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _acc_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool operational = 1;
  if (this->operational() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Sensors_ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.Sensors.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Sensors_ImuData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_Sensors_ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.Sensors.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.Sensors.ImuData)
    MergeFrom(*source);
  }
}

void ClientToServer_Sensors_ImuData::MergeFrom(const ClientToServer_Sensors_ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.Sensors.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acc_.MergeFrom(from.acc_);
  if (from.operational() != 0) {
    set_operational(from.operational());
  }
}

void ClientToServer_Sensors_ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.Sensors.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Sensors_ImuData::CopyFrom(const ClientToServer_Sensors_ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.Sensors.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Sensors_ImuData::IsInitialized() const {
  return true;
}

void ClientToServer_Sensors_ImuData::Swap(ClientToServer_Sensors_ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_Sensors_ImuData::InternalSwap(ClientToServer_Sensors_ImuData* other) {
  using std::swap;
  acc_.InternalSwap(&other->acc_);
  swap(operational_, other->operational_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_Sensors_ImuData::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_Sensors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_Sensors::kModuleStatusFieldNumber;
const int ClientToServer_Sensors::kImuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_Sensors::ClientToServer_Sensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_Sensors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.Sensors)
}
ClientToServer_Sensors::ClientToServer_Sensors(const ClientToServer_Sensors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      imu_(from.imu_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_status_ = from.module_status_;
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.Sensors)
}

void ClientToServer_Sensors::SharedCtor() {
  module_status_ = 0;
}

ClientToServer_Sensors::~ClientToServer_Sensors() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.Sensors)
  SharedDtor();
}

void ClientToServer_Sensors::SharedDtor() {
}

void ClientToServer_Sensors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_Sensors::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_Sensors& ClientToServer_Sensors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_Sensors.base);
  return *internal_default_instance();
}


void ClientToServer_Sensors::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.Sensors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_.Clear();
  module_status_ = 0;
  _internal_metadata_.Clear();
}

bool ClientToServer_Sensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.Sensors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_status(static_cast< ::telemetry_data::ClientToServer_ModuleStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .telemetry_data.ClientToServer.Sensors.ImuData imu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.Sensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.Sensors)
  return false;
#undef DO_
}

void ClientToServer_Sensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.Sensors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->module_status(), output);
  }

  // repeated .telemetry_data.ClientToServer.Sensors.ImuData imu = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imu_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->imu(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.Sensors)
}

::google::protobuf::uint8* ClientToServer_Sensors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.Sensors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->module_status(), target);
  }

  // repeated .telemetry_data.ClientToServer.Sensors.ImuData imu = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imu_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->imu(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.Sensors)
  return target;
}

size_t ClientToServer_Sensors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.Sensors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .telemetry_data.ClientToServer.Sensors.ImuData imu = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->imu_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->imu(static_cast<int>(i)));
    }
  }

  // .telemetry_data.ClientToServer.ModuleStatus module_status = 1;
  if (this->module_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_Sensors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.Sensors)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_Sensors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_Sensors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.Sensors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.Sensors)
    MergeFrom(*source);
  }
}

void ClientToServer_Sensors::MergeFrom(const ClientToServer_Sensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.Sensors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imu_.MergeFrom(from.imu_);
  if (from.module_status() != 0) {
    set_module_status(from.module_status());
  }
}

void ClientToServer_Sensors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.Sensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_Sensors::CopyFrom(const ClientToServer_Sensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.Sensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_Sensors::IsInitialized() const {
  return true;
}

void ClientToServer_Sensors::Swap(ClientToServer_Sensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_Sensors::InternalSwap(ClientToServer_Sensors* other) {
  using std::swap;
  CastToBase(&imu_)->InternalSwap(CastToBase(&other->imu_));
  swap(module_status_, other->module_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_Sensors::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer_EmergencyBrakes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer_EmergencyBrakes::kFrontBrakesFieldNumber;
const int ClientToServer_EmergencyBrakes::kRearBrakesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer_EmergencyBrakes::ClientToServer_EmergencyBrakes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer_EmergencyBrakes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer.EmergencyBrakes)
}
ClientToServer_EmergencyBrakes::ClientToServer_EmergencyBrakes(const ClientToServer_EmergencyBrakes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_brakes_, &from.front_brakes_,
    static_cast<size_t>(reinterpret_cast<char*>(&rear_brakes_) -
    reinterpret_cast<char*>(&front_brakes_)) + sizeof(rear_brakes_));
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer.EmergencyBrakes)
}

void ClientToServer_EmergencyBrakes::SharedCtor() {
  ::memset(&front_brakes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_brakes_) -
      reinterpret_cast<char*>(&front_brakes_)) + sizeof(rear_brakes_));
}

ClientToServer_EmergencyBrakes::~ClientToServer_EmergencyBrakes() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer.EmergencyBrakes)
  SharedDtor();
}

void ClientToServer_EmergencyBrakes::SharedDtor() {
}

void ClientToServer_EmergencyBrakes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer_EmergencyBrakes::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer_EmergencyBrakes& ClientToServer_EmergencyBrakes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer_EmergencyBrakes.base);
  return *internal_default_instance();
}


void ClientToServer_EmergencyBrakes::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer.EmergencyBrakes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_brakes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_brakes_) -
      reinterpret_cast<char*>(&front_brakes_)) + sizeof(rear_brakes_));
  _internal_metadata_.Clear();
}

bool ClientToServer_EmergencyBrakes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer.EmergencyBrakes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool front_brakes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_brakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rear_brakes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rear_brakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer.EmergencyBrakes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer.EmergencyBrakes)
  return false;
#undef DO_
}

void ClientToServer_EmergencyBrakes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer.EmergencyBrakes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool front_brakes = 1;
  if (this->front_brakes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->front_brakes(), output);
  }

  // bool rear_brakes = 2;
  if (this->rear_brakes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rear_brakes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer.EmergencyBrakes)
}

::google::protobuf::uint8* ClientToServer_EmergencyBrakes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer.EmergencyBrakes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool front_brakes = 1;
  if (this->front_brakes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->front_brakes(), target);
  }

  // bool rear_brakes = 2;
  if (this->rear_brakes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rear_brakes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer.EmergencyBrakes)
  return target;
}

size_t ClientToServer_EmergencyBrakes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer.EmergencyBrakes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool front_brakes = 1;
  if (this->front_brakes() != 0) {
    total_size += 1 + 1;
  }

  // bool rear_brakes = 2;
  if (this->rear_brakes() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer_EmergencyBrakes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer.EmergencyBrakes)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer_EmergencyBrakes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer_EmergencyBrakes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer.EmergencyBrakes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer.EmergencyBrakes)
    MergeFrom(*source);
  }
}

void ClientToServer_EmergencyBrakes::MergeFrom(const ClientToServer_EmergencyBrakes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer.EmergencyBrakes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.front_brakes() != 0) {
    set_front_brakes(from.front_brakes());
  }
  if (from.rear_brakes() != 0) {
    set_rear_brakes(from.rear_brakes());
  }
}

void ClientToServer_EmergencyBrakes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer.EmergencyBrakes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer_EmergencyBrakes::CopyFrom(const ClientToServer_EmergencyBrakes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer.EmergencyBrakes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer_EmergencyBrakes::IsInitialized() const {
  return true;
}

void ClientToServer_EmergencyBrakes::Swap(ClientToServer_EmergencyBrakes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer_EmergencyBrakes::InternalSwap(ClientToServer_EmergencyBrakes* other) {
  using std::swap;
  swap(front_brakes_, other->front_brakes_);
  swap(rear_brakes_, other->rear_brakes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer_EmergencyBrakes::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientToServer::InitAsDefaultInstance() {
  ::telemetry_data::_ClientToServer_default_instance_._instance.get_mutable()->navigation_ = const_cast< ::telemetry_data::ClientToServer_Navigation*>(
      ::telemetry_data::ClientToServer_Navigation::internal_default_instance());
  ::telemetry_data::_ClientToServer_default_instance_._instance.get_mutable()->state_machine_ = const_cast< ::telemetry_data::ClientToServer_StateMachine*>(
      ::telemetry_data::ClientToServer_StateMachine::internal_default_instance());
  ::telemetry_data::_ClientToServer_default_instance_._instance.get_mutable()->motors_ = const_cast< ::telemetry_data::ClientToServer_Motors*>(
      ::telemetry_data::ClientToServer_Motors::internal_default_instance());
  ::telemetry_data::_ClientToServer_default_instance_._instance.get_mutable()->batteries_ = const_cast< ::telemetry_data::ClientToServer_Batteries*>(
      ::telemetry_data::ClientToServer_Batteries::internal_default_instance());
  ::telemetry_data::_ClientToServer_default_instance_._instance.get_mutable()->sensors_ = const_cast< ::telemetry_data::ClientToServer_Sensors*>(
      ::telemetry_data::ClientToServer_Sensors::internal_default_instance());
  ::telemetry_data::_ClientToServer_default_instance_._instance.get_mutable()->emergency_brakes_ = const_cast< ::telemetry_data::ClientToServer_EmergencyBrakes*>(
      ::telemetry_data::ClientToServer_EmergencyBrakes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer::kNavigationFieldNumber;
const int ClientToServer::kStateMachineFieldNumber;
const int ClientToServer::kMotorsFieldNumber;
const int ClientToServer::kBatteriesFieldNumber;
const int ClientToServer::kSensorsFieldNumber;
const int ClientToServer::kEmergencyBrakesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer::ClientToServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientToServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry_data.ClientToServer)
}
ClientToServer::ClientToServer(const ClientToServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_navigation()) {
    navigation_ = new ::telemetry_data::ClientToServer_Navigation(*from.navigation_);
  } else {
    navigation_ = NULL;
  }
  if (from.has_state_machine()) {
    state_machine_ = new ::telemetry_data::ClientToServer_StateMachine(*from.state_machine_);
  } else {
    state_machine_ = NULL;
  }
  if (from.has_motors()) {
    motors_ = new ::telemetry_data::ClientToServer_Motors(*from.motors_);
  } else {
    motors_ = NULL;
  }
  if (from.has_batteries()) {
    batteries_ = new ::telemetry_data::ClientToServer_Batteries(*from.batteries_);
  } else {
    batteries_ = NULL;
  }
  if (from.has_sensors()) {
    sensors_ = new ::telemetry_data::ClientToServer_Sensors(*from.sensors_);
  } else {
    sensors_ = NULL;
  }
  if (from.has_emergency_brakes()) {
    emergency_brakes_ = new ::telemetry_data::ClientToServer_EmergencyBrakes(*from.emergency_brakes_);
  } else {
    emergency_brakes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:telemetry_data.ClientToServer)
}

void ClientToServer::SharedCtor() {
  ::memset(&navigation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emergency_brakes_) -
      reinterpret_cast<char*>(&navigation_)) + sizeof(emergency_brakes_));
}

ClientToServer::~ClientToServer() {
  // @@protoc_insertion_point(destructor:telemetry_data.ClientToServer)
  SharedDtor();
}

void ClientToServer::SharedDtor() {
  if (this != internal_default_instance()) delete navigation_;
  if (this != internal_default_instance()) delete state_machine_;
  if (this != internal_default_instance()) delete motors_;
  if (this != internal_default_instance()) delete batteries_;
  if (this != internal_default_instance()) delete sensors_;
  if (this != internal_default_instance()) delete emergency_brakes_;
}

void ClientToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientToServer::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientToServer& ClientToServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientToServer.base);
  return *internal_default_instance();
}


void ClientToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_data.ClientToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && navigation_ != NULL) {
    delete navigation_;
  }
  navigation_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_machine_ != NULL) {
    delete state_machine_;
  }
  state_machine_ = NULL;
  if (GetArenaNoVirtual() == NULL && motors_ != NULL) {
    delete motors_;
  }
  motors_ = NULL;
  if (GetArenaNoVirtual() == NULL && batteries_ != NULL) {
    delete batteries_;
  }
  batteries_ = NULL;
  if (GetArenaNoVirtual() == NULL && sensors_ != NULL) {
    delete sensors_;
  }
  sensors_ = NULL;
  if (GetArenaNoVirtual() == NULL && emergency_brakes_ != NULL) {
    delete emergency_brakes_;
  }
  emergency_brakes_ = NULL;
  _internal_metadata_.Clear();
}

bool ClientToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry_data.ClientToServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .telemetry_data.ClientToServer.Navigation navigation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry_data.ClientToServer.StateMachine state_machine = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry_data.ClientToServer.Motors motors = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_motors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry_data.ClientToServer.Batteries batteries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batteries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry_data.ClientToServer.Sensors sensors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .telemetry_data.ClientToServer.EmergencyBrakes emergency_brakes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_brakes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry_data.ClientToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry_data.ClientToServer)
  return false;
#undef DO_
}

void ClientToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry_data.ClientToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.Navigation navigation = 1;
  if (this->has_navigation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_navigation(), output);
  }

  // .telemetry_data.ClientToServer.StateMachine state_machine = 2;
  if (this->has_state_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state_machine(), output);
  }

  // .telemetry_data.ClientToServer.Motors motors = 3;
  if (this->has_motors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_motors(), output);
  }

  // .telemetry_data.ClientToServer.Batteries batteries = 4;
  if (this->has_batteries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_batteries(), output);
  }

  // .telemetry_data.ClientToServer.Sensors sensors = 5;
  if (this->has_sensors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_sensors(), output);
  }

  // .telemetry_data.ClientToServer.EmergencyBrakes emergency_brakes = 6;
  if (this->has_emergency_brakes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_emergency_brakes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry_data.ClientToServer)
}

::google::protobuf::uint8* ClientToServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_data.ClientToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .telemetry_data.ClientToServer.Navigation navigation = 1;
  if (this->has_navigation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_navigation(), deterministic, target);
  }

  // .telemetry_data.ClientToServer.StateMachine state_machine = 2;
  if (this->has_state_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state_machine(), deterministic, target);
  }

  // .telemetry_data.ClientToServer.Motors motors = 3;
  if (this->has_motors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_motors(), deterministic, target);
  }

  // .telemetry_data.ClientToServer.Batteries batteries = 4;
  if (this->has_batteries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_batteries(), deterministic, target);
  }

  // .telemetry_data.ClientToServer.Sensors sensors = 5;
  if (this->has_sensors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_sensors(), deterministic, target);
  }

  // .telemetry_data.ClientToServer.EmergencyBrakes emergency_brakes = 6;
  if (this->has_emergency_brakes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_emergency_brakes(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_data.ClientToServer)
  return target;
}

size_t ClientToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_data.ClientToServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .telemetry_data.ClientToServer.Navigation navigation = 1;
  if (this->has_navigation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *navigation_);
  }

  // .telemetry_data.ClientToServer.StateMachine state_machine = 2;
  if (this->has_state_machine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_machine_);
  }

  // .telemetry_data.ClientToServer.Motors motors = 3;
  if (this->has_motors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *motors_);
  }

  // .telemetry_data.ClientToServer.Batteries batteries = 4;
  if (this->has_batteries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *batteries_);
  }

  // .telemetry_data.ClientToServer.Sensors sensors = 5;
  if (this->has_sensors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensors_);
  }

  // .telemetry_data.ClientToServer.EmergencyBrakes emergency_brakes = 6;
  if (this->has_emergency_brakes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *emergency_brakes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry_data.ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientToServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry_data.ClientToServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry_data.ClientToServer)
    MergeFrom(*source);
  }
}

void ClientToServer::MergeFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry_data.ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_navigation()) {
    mutable_navigation()->::telemetry_data::ClientToServer_Navigation::MergeFrom(from.navigation());
  }
  if (from.has_state_machine()) {
    mutable_state_machine()->::telemetry_data::ClientToServer_StateMachine::MergeFrom(from.state_machine());
  }
  if (from.has_motors()) {
    mutable_motors()->::telemetry_data::ClientToServer_Motors::MergeFrom(from.motors());
  }
  if (from.has_batteries()) {
    mutable_batteries()->::telemetry_data::ClientToServer_Batteries::MergeFrom(from.batteries());
  }
  if (from.has_sensors()) {
    mutable_sensors()->::telemetry_data::ClientToServer_Sensors::MergeFrom(from.sensors());
  }
  if (from.has_emergency_brakes()) {
    mutable_emergency_brakes()->::telemetry_data::ClientToServer_EmergencyBrakes::MergeFrom(from.emergency_brakes());
  }
}

void ClientToServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry_data.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_data.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer::IsInitialized() const {
  return true;
}

void ClientToServer::Swap(ClientToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer::InternalSwap(ClientToServer* other) {
  using std::swap;
  swap(navigation_, other->navigation_);
  swap(state_machine_, other->state_machine_);
  swap(motors_, other->motors_);
  swap(batteries_, other->batteries_);
  swap(sensors_, other->sensors_);
  swap(emergency_brakes_, other->emergency_brakes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientToServer::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry_data
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ServerToClient* Arena::CreateMaybeMessage< ::telemetry_data::ServerToClient >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ServerToClient >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_Navigation* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_Navigation >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_Navigation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_StateMachine* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_StateMachine >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_StateMachine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_Motors* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_Motors >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_Motors >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_Batteries_BatteryData* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_Batteries_BatteryData >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_Batteries_BatteryData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_Batteries* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_Batteries >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_Batteries >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_Sensors_ImuData* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_Sensors_ImuData >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_Sensors_ImuData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_Sensors* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_Sensors >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_Sensors >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer_EmergencyBrakes* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer_EmergencyBrakes >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer_EmergencyBrakes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::telemetry_data::ClientToServer* Arena::CreateMaybeMessage< ::telemetry_data::ClientToServer >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry_data::ClientToServer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
