// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto 

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_2eproto
namespace protoTypes {
class TestMessage;
class TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace protoTypes
namespace google {
namespace protobuf {
template<> ::protoTypes::TestMessage* Arena::CreateMaybeMessage<::protoTypes::TestMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protoTypes {

enum TestMessage_Command {
  TestMessage_Command_ERROR = 0,
  TestMessage_Command_VELOCITY = 1,
  TestMessage_Command_ACCELERATION = 2,
  TestMessage_Command_BRAKE_TEMP = 3,
  TestMessage_Command_FINISH = 4,
  TestMessage_Command_EM_STOP = 5,
  TestMessage_Command_TestMessage_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TestMessage_Command_TestMessage_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TestMessage_Command_IsValid(int value);
const TestMessage_Command TestMessage_Command_Command_MIN = TestMessage_Command_ERROR;
const TestMessage_Command TestMessage_Command_Command_MAX = TestMessage_Command_EM_STOP;
const int TestMessage_Command_Command_ARRAYSIZE = TestMessage_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestMessage_Command_descriptor();
inline const ::std::string& TestMessage_Command_Name(TestMessage_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestMessage_Command_descriptor(), value);
}
inline bool TestMessage_Command_Parse(
    const ::std::string& name, TestMessage_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestMessage_Command>(
    TestMessage_Command_descriptor(), name, value);
}
// ===================================================================

class TestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoTypes.TestMessage) */ {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestMessage* other);
  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestMessage* New() const final {
    return CreateMaybeMessage<TestMessage>(NULL);
  }

  TestMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMessage_Command Command;
  static const Command ERROR =
    TestMessage_Command_ERROR;
  static const Command VELOCITY =
    TestMessage_Command_VELOCITY;
  static const Command ACCELERATION =
    TestMessage_Command_ACCELERATION;
  static const Command BRAKE_TEMP =
    TestMessage_Command_BRAKE_TEMP;
  static const Command FINISH =
    TestMessage_Command_FINISH;
  static const Command EM_STOP =
    TestMessage_Command_EM_STOP;
  static inline bool Command_IsValid(int value) {
    return TestMessage_Command_IsValid(value);
  }
  static const Command Command_MIN =
    TestMessage_Command_Command_MIN;
  static const Command Command_MAX =
    TestMessage_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    TestMessage_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return TestMessage_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return TestMessage_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return TestMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .protoTypes.TestMessage.Command command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::protoTypes::TestMessage_Command command() const;
  void set_command(::protoTypes::TestMessage_Command value);

  // int32 data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::google::protobuf::int32 data() const;
  void set_data(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protoTypes.TestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int command_;
  ::google::protobuf::int32 data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMessage

// .protoTypes.TestMessage.Command command = 1;
inline void TestMessage::clear_command() {
  command_ = 0;
}
inline ::protoTypes::TestMessage_Command TestMessage::command() const {
  // @@protoc_insertion_point(field_get:protoTypes.TestMessage.command)
  return static_cast< ::protoTypes::TestMessage_Command >(command_);
}
inline void TestMessage::set_command(::protoTypes::TestMessage_Command value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:protoTypes.TestMessage.command)
}

// int32 data = 2;
inline void TestMessage::clear_data() {
  data_ = 0;
}
inline ::google::protobuf::int32 TestMessage::data() const {
  // @@protoc_insertion_point(field_get:protoTypes.TestMessage.data)
  return data_;
}
inline void TestMessage::set_data(::google::protobuf::int32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:protoTypes.TestMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protoTypes

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protoTypes::TestMessage_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protoTypes::TestMessage_Command>() {
  return ::protoTypes::TestMessage_Command_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_2eproto
